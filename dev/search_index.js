var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Backboner\nDocTestSetup = quote\n    using Backboner\nend","category":"page"},{"location":"#Backboner","page":"Home","title":"Backboner","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Latest Release) (Image: MIT license) (Image: Documentation) (Image: Documentation) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Backboner is a Julia package for storing the atom positions of protein backbones in a compact format, with additional functionality for estimating oxygen atom positions, assigning secondary structure, and loading backbones from residue locations and rotation matrices.","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Backboner]","category":"page"},{"location":"#Backboner.Backbone","page":"Home","title":"Backboner.Backbone","text":"Backbone{N,T}\n\nA wrapper for a 3xNxL array of coordinates of atoms. Backbone{4} is used to store 3-dimensional coordinates of the backbone atoms (N, CA, C, O) of a protein chain.\n\n\n\n\n\n","category":"type"},{"location":"#Backboner.Chain","page":"Home","title":"Backboner.Chain","text":"Chain{T}\n\nA chain has an identifier (usually a single letter) and holds the backbone atom coordinates, amino acid sequence, and secondary structures of a protein chain. \n\n\n\n\n\n","category":"type"},{"location":"#Backboner.Protein","page":"Home","title":"Backboner.Protein","text":"Protein{T} <: AbstractVector{Chain{T}}\n\nA wrapper for a vector of chains. Chains can be accessed by index or by ID.\n\n\n\n\n\n","category":"type"},{"location":"#Backboner.add_oxygens-Union{Tuple{Backbone{3, T}}, Tuple{T}} where T<:Real","page":"Home","title":"Backboner.add_oxygens","text":"add_oxygens(backbone::Backbone{3})\n\nAdd oxygen atoms to the backbone of a protein, turning the coordinate array from size 3x3xL to 3x4xL-1, where L is the length of the backbone.\n\nnote: Note\nOne residue is lost in the process, since the orientation of the last oxygen atom cannot be determined. We may consider adding a feature for creating a dummy oxygen atom at the end of the backbone with randomized orientation to preserve the length of the backbone.\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.assign_secondary_structure!-Tuple{Protein}","page":"Home","title":"Backboner.assign_secondary_structure!","text":"assign_secondary_structure!(protein)\n\nUses a simplified version of DSSP to fill the secondary structure vector of each chain with Loop, Helix, and Strand.\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.atom_coord_matrix-Tuple{Backbone, Any}","page":"Home","title":"Backboner.atom_coord_matrix","text":"atom_coord_matrix(backbone, i)\n\nReturns the coordinates of specific columns of atoms in a backbone.\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.backbone_to_locs_and_rots-Union{Tuple{Backbone{N, T}}, Tuple{T}, Tuple{N}, Tuple{Backbone{N, T}, Symbol}} where {N, T}","page":"Home","title":"Backboner.backbone_to_locs_and_rots","text":"backbone_to_locs_and_rots(backbone, unit=:angstrom)\n\nReturns the locations and rotation matrices of residues in a backbone, according to a defined standard triangle (Backboner.STANDARDTRIANGLEANGSTROM).\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.locs_and_rots_to_backbone-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractArray{T, 3}}} where T","page":"Home","title":"Backboner.locs_and_rots_to_backbone","text":"locs_and_rots_to_backbone(locations, rot_matrices; unit=:angstrom)\n\nReturns a backbone with the given locations and rotation matrices of residues. If unit is :nm, the locations are converted to angstroms by multiplying them by 10.\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.pdb_to_protein-Tuple{String}","page":"Home","title":"Backboner.pdb_to_protein","text":"pdb_to_protein(filename::String)\n\nAssumes that each residue starts with four atoms: N, CA, C, O.\n\n\n\n\n\n","category":"method"}]
}
