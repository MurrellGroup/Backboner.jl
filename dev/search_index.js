var documenterSearchIndex = {"docs":
[{"location":"oxygen/#Oxygen-atoms","page":"Oxygen atoms","title":"Oxygen atoms","text":"","category":"section"},{"location":"oxygen/","page":"Oxygen atoms","title":"Oxygen atoms","text":"The reason for having N as a type parameter is to make Backbone more flexible by allowing one to pass only the N, CA, and C atoms of a backbone, such that the O atom positions can added in using the add_oxygens function.","category":"page"},{"location":"oxygen/","page":"Oxygen atoms","title":"Oxygen atoms","text":"julia> using Backboner\n\njulia> protein = pdb_to_protein(\"test/data/1ZAK.pdb\")\n2-element Protein{Float32}:\n Chain A with 220 residues\n Chain B with 220 residues\n\njulia> chain = protein[\"A\"]\nChain A with 220 residues\n\njulia> backbone4 = chain.backbone\n3×4×220 Backbone{4, Float32}:\n[:, :, 1] =\n 22.346  22.901  23.227  22.689\n 17.547  18.031  16.793  15.72\n 23.294  21.993  21.163  21.448\n\n;;; … \n\n[:, :, 220] =\n 21.808  22.263  21.085  19.939\n 13.861  13.862  14.233  13.851\n  2.734   1.355   0.446   0.791\n\njulia> backbone3 = remove_column(backbone4, 4) # remove oxygen column\n3×3×220 Backbone{3, Float32}:\n[:, :, 1] =\n 22.346  22.901  23.227\n 17.547  18.031  16.793\n 23.294  21.993  21.163\n\n;;; … \n\n[:, :, 220] =\n 21.808  22.263  21.085\n 13.861  13.862  14.233\n  2.734   1.355   0.446\n\njulia> backbone4_approx = add_oxygens(backbone3) # add oxygen column\n3×4×220 Backbone{4, Float32}:\n[:, :, 1] =\n 22.346  22.901  23.227  22.6697\n 17.547  18.031  16.793  15.7257\n 23.294  21.993  21.163  21.4295\n\n;;; … \n\n[:, :, 220] =\n 21.808  22.263  21.085  20.2198\n 13.861  13.862  14.233  13.42\n  2.734   1.355   0.446   0.112399","category":"page"},{"location":"oxygen/","page":"Oxygen atoms","title":"Oxygen atoms","text":"note: Note\nThe add_oxygens function adds oxygen atoms to the backbone using idealized geometry, and oxygens atom will on average deviate 0.05 Å from the original positions. Moreover, the last oxygen atom is also given a random orientation, as that information is lost when the backbone is reduced to 3 atoms, and there's no next nitrogen atom to compare to.","category":"page"},{"location":"backbone/#Backbone","page":"Backbone","title":"Backbone","text":"","category":"section"},{"location":"backbone/","page":"Backbone","title":"Backbone","text":"The Backbone{N} type wraps a three-dimensional array of size (3, N, L) representing atom coordinates of a backbone with N backbone atoms per residue and L residues.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"CurrentModule = Backboner\nDocTestSetup = quote\n    using Backboner\nend","category":"page"},{"location":"#Backboner","page":"Overview","title":"Backboner","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"(Image: Latest Release) (Image: MIT license) (Image: Documentation) (Image: Documentation) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Backboner is a Julia package that offers a suite of tools for storing protein backbone atom positions, estimating oxygen atom positions, assigning secondary structure, and more. View the source code on GitHub (licensed under MIT).","category":"page"},{"location":"#Installation","page":"Overview","title":"Installation","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Backboner is a registered Julia package, and can be installed with the Julia package manager:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Pkg\nPkg.add(\"Backboner\")","category":"page"},{"location":"#Usage","page":"Overview","title":"Usage","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The Protein type wraps a vector of Chains.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"julia> using Backboner\n\njulia> protein = pdb_to_protein(\"test/data/1ZAK.pdb\")\n2-element Protein{Float32}:\n Chain A with 220 residues\n Chain B with 220 residues\n\njulia> chain = protein[\"A\"] # chains can be accessed by name\nChain A with 220 residues\n\njulia> protein[\"A\"] == protein[1] # numeric indexing also works\ntrue\n\njulia> new_protein = Protein([protein[\"A\"]]) # create a new protein with a single chain\n1-element Protein{Float32}:\n Chain A with 220 residues\n\njulia> protein_to_pdb(new_protein, \"test/data/1ZAK_A.pdb\");","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The Chain type wraps the Backbone{4} type (4, because it stores the positions of 4 atoms per residue: N, CA, C, O).","category":"page"},{"location":"#API-Reference","page":"Overview","title":"API Reference","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Modules = [Backboner]","category":"page"},{"location":"#Backboner.Backbone","page":"Overview","title":"Backboner.Backbone","text":"Backbone{N, T <: Real} <: AbstractArray{T, 3}\n\nA wrapper for a 3xNxL array of coordinates of atoms. Backbone{4} is used to store 3-dimensional coordinates of the backbone atoms (N, CA, C, O) of a protein chain.\n\n\n\n\n\n","category":"type"},{"location":"#Backboner.Chain","page":"Overview","title":"Backboner.Chain","text":"Chain <: AbstractVector{Residue}\n\nA chain has an identifier (usually a single letter) and holds the backbone atom coordinates, amino acid sequence, and secondary structures of a protein chain. \n\n\n\n\n\n","category":"type"},{"location":"#Backboner.Protein","page":"Overview","title":"Backboner.Protein","text":"Protein <: AbstractVector{Chain}\n\nA wrapper for a vector of chains. Chains can be accessed by index or by ID.\n\n\n\n\n\n","category":"type"},{"location":"#AssigningSecondaryStructure.assign_secondary_structure!-Tuple{Protein}","page":"Overview","title":"AssigningSecondaryStructure.assign_secondary_structure!","text":"assign_secondary_structure!(protein)\n\nUses a simplified version of DSSP to fill the secondary structure vector of each chain with '-' (coil/loop), 'H' (helix), and 'E' (strand).\n\n\n\n\n\n","category":"method"},{"location":"#AssigningSecondaryStructure.assign_secondary_structure-Tuple{Protein}","page":"Overview","title":"AssigningSecondaryStructure.assign_secondary_structure","text":"assign_secondary_structure(protein)\n\nReturns a new protein with secondary structure assigned.\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.add_oxygens-Union{Tuple{Backbone{3, T}}, Tuple{T}} where T<:Real","page":"Overview","title":"Backboner.add_oxygens","text":"add_oxygens(backbone::Backbone{3})\n\nAdd oxygen atoms to the backbone of a protein, turning the coordinate array from size 3x3xL to 3x4xL-1, where L is the length of the backbone.\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.atom_coord_matrix-Tuple{Backbone, Any}","page":"Overview","title":"Backboner.atom_coord_matrix","text":"atom_coord_matrix(backbone, i)\n\nReturns the coordinates of specific columns of atoms in a backbone.\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.backbone_to_locs_and_rots-Union{Tuple{Backbone{N, T}}, Tuple{T}, Tuple{N}, Tuple{Backbone{N, T}, Symbol}} where {N, T}","page":"Overview","title":"Backboner.backbone_to_locs_and_rots","text":"backbone_to_locs_and_rots(backbone, unit=:angstrom)\n\nReturns the locations and rotation matrices of residues in a backbone, according to a defined standard triangle (Backboner.STANDARD_TRIANGLE_ANGSTROM).\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.locs_and_rots_to_backbone-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractArray{T, 3}}} where T","page":"Overview","title":"Backboner.locs_and_rots_to_backbone","text":"locs_and_rots_to_backbone(locations, rot_matrices; unit=:angstrom)\n\nReturns a backbone with the given locations and rotation matrices of residues. If unit is :nm, the locations are converted to angstroms by multiplying them by 10.\n\n\n\n\n\n","category":"method"},{"location":"#Backboner.pdb_to_protein-Tuple{String}","page":"Overview","title":"Backboner.pdb_to_protein","text":"pdb_to_protein(filename::String)\n\nAssumes that each residue starts with four atoms: N, CA, C, O.\n\n\n\n\n\n","category":"method"}]
}
